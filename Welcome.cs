// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);
//Esto sale de un sitio llamado quicktype, se usa para crear clases para json
//En ultima instancia tuve que modificarlo para poder tomar todas las posibles opciones del Json ejemplo
//Aun no se como leer un Jsonl, solo un Json
namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("Bar", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Bar { get; set; }

        [JsonProperty("Cofee shop", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CofeeShop { get; set; }

        [JsonProperty("Hospital", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Hospital { get; set; }

        [JsonProperty("Kindergarten", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Kindergarten { get; set; }

        [JsonProperty("Vet", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Vet { get; set; }

        [JsonProperty("Bakery", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Bakery { get; set; }
        [JsonProperty("Mall", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Mall { get; set; }
        [JsonProperty("Salon", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Salon { get; set; }
        [JsonProperty("Pharmacy", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Pharmacy { get; set; }
        [JsonProperty("Gym", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Gym { get; set; }
        [JsonProperty("Store", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Store { get; set; }
        [JsonProperty("Restaurant", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Restaurant { get; set; }
        [JsonProperty("Barber Shop", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BarberShop { get; set; }
        [JsonProperty("Clinic", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Clinic { get; set; }
        [JsonProperty("Grocery Store", NullValueHandling = NullValueHandling.Ignore)]
        public bool? GroceryStore { get; set; }
        [JsonProperty("Gas Station", NullValueHandling = NullValueHandling.Ignore)]
        public bool? GasStation { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}